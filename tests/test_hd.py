import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))
from hfhd import hd
import numpy as np
import pandas as pd
from numpy import nan


def test_fsop_equal():
    sigma = np.eye(2)
    S = 2*np.eye(2) + 1
    fsopt = hd.fsopt(S, sigma)
    # print(sigma, fsopt)
    assert np.allclose(fsopt, sigma)


def test_linear_shrinkage_intensity():
    np.random.seed(0)
    n = 5
    p = 50
    X = np.random.multivariate_normal(np.zeros(p), np.eye(p), n)
    S = np.cov(X.T)
    rho = hd._linear_shrinkage_intensity(X.T, S)
    # print(rho)
    assert np.allclose(rho, 0.6510283857677512)


def test__linear_shrinkage_cov():
    np.random.seed(0)
    n = 5
    p = 5
    X = np.random.multivariate_normal(np.zeros(p), np.eye(p), n)
    S = np.cov(X.T)
    cov = hd._linear_shrinkage_cov(S, 0.1)
    # print(repr(cov))
    assert np.allclose(cov, np.array([
       [ 2.45653147,  0.02090578,  0.06479169,  1.47201982, -0.46265304],
       [ 0.02090578,  0.32973086, -0.13795285, -0.1922658 , -0.47424349],
       [ 0.06479169, -0.13795285,  0.42122102,  0.17390622,  0.535665  ],
       [ 1.47201982, -0.1922658 ,  0.17390622,  1.25079368,  0.16427303],
       [-0.46265304, -0.47424349,  0.535665  ,  0.16427303,  1.53983998]]))


def test_linear_shrinkage():
    np.random.seed(0)
    n = 5
    p = 5
    X = np.random.multivariate_normal(np.zeros(p), np.eye(p), n)
    cov = hd.linear_shrinkage(X.T)
    # print(repr(cov))
    assert np.allclose(cov, np.array([
       [1.1996234, 0.       , 0.       , 0.       , 0.       ],
       [0.       , 1.1996234, 0.       , 0.       , 0.       ],
       [0.       , 0.       , 1.1996234, 0.       , 0.       ],
       [0.       , 0.       , 0.       , 1.1996234, 0.       ],
       [0.       , 0.       , 0.       , 0.       , 1.1996234]]))


def test_nonlinear_shrinkage_p_smaller_n():
    np.random.seed(0)
    n = 13
    p = 5
    X = np.random.multivariate_normal(np.zeros(p), np.eye(p), n)
    cov = hd.nonlinear_shrinkage(X.T)
    # print(repr(cov))
    assert np.allclose(cov, np.array([
       [ 1.35344844,  0.04467604,  0.11717621,  0.024704  , -0.23732149],
       [ 0.04467604,  1.28713125,  0.17199246, -0.05687101,  0.02421098],
       [ 0.11717621,  0.17199246,  1.15799787, -0.13087892,  0.24026345],
       [ 0.024704  , -0.05687101, -0.13087892,  1.18481562, -0.00205397],
       [-0.23732149,  0.02421098,  0.24026345, -0.00205397,  1.2049306 ]]))


def test_nonlinear_shrinkage_p_greater_n():
    np.random.seed(0)
    n = 13
    p = 15
    X = np.random.multivariate_normal(np.zeros(p), np.eye(p), n)
    cov = hd.nonlinear_shrinkage(X.T)
    # print(repr(cov))
    assert np.allclose(cov, np.array([
       [ 0.94368675,  0.05490987,  0.04474734,  0.29080366,  0.10902878,
         0.09003449,  0.03036868, -0.07055931,  0.0635517 , -0.04414004,
         0.01700764,  0.10960332, -0.03967756,  0.09446944,  0.03511019],
       [ 0.05490987,  0.95908998,  0.08201898,  0.06060007, -0.07585481,
        -0.0769887 ,  0.22270598, -0.02395752, -0.00772971,  0.02555772,
        -0.09573197,  0.01810948, -0.06917041,  0.15688583, -0.05317513],
       [ 0.04474734,  0.08201898,  0.68274997,  0.10569908, -0.08242221,
        -0.02207152,  0.00364481,  0.00649368,  0.00690874,  0.07431352,
         0.01406335,  0.01551816,  0.06357575, -0.04399953,  0.11923481],
       [ 0.29080366,  0.06060007,  0.10569908,  1.33743063,  0.16716032,
         0.16213729,  0.12931077,  0.04688434,  0.33365363,  0.066164  ,
         0.20523083,  0.00466832,  0.02064453,  0.07308203,  0.06905987],
       [ 0.10902878, -0.07585481, -0.08242221,  0.16716032,  0.84021069,
         0.11421646,  0.10514441, -0.12627706,  0.05704797, -0.12062421,
        -0.01295888,  0.12438535,  0.03923418, -0.07637782, -0.05010725],
       [ 0.09003449, -0.0769887 , -0.02207152,  0.16213729,  0.11421646,
         1.18453171,  0.05836229,  0.04086788,  0.09358991, -0.26995681,
         0.10717382, -0.04585334, -0.12769995,  0.08622382, -0.08576411],
       [ 0.03036868,  0.22270598,  0.00364481,  0.12931077,  0.10514441,
         0.05836229,  0.777588  , -0.05216218,  0.04866723, -0.07223284,
        -0.11105213,  0.0701701 ,  0.02607544,  0.14635577, -0.02735392],
       [-0.07055931, -0.02395752,  0.00649368,  0.04688434, -0.12627706,
         0.04086788, -0.05216218,  0.89187665,  0.08142683,  0.12718739,
         0.03698358, -0.31118708, -0.18033388,  0.06035246, -0.04068857],
       [ 0.0635517 , -0.00772971,  0.00690874,  0.33365363,  0.05704797,
         0.09358991,  0.04866723,  0.08142683,  0.87491693, -0.05585188,
         0.09043294,  0.01452274, -0.10471364,  0.07146674,  0.05094118],
       [-0.04414004,  0.02555772,  0.07431352,  0.066164  , -0.12062421,
        -0.26995681, -0.07223284,  0.12718739, -0.05585188,  1.11533989,
        -0.02368014,  0.00140657,  0.08145303, -0.11014874,  0.04111743],
       [ 0.01700764, -0.09573197,  0.01406335,  0.20523083, -0.01295888,
         0.10717382, -0.11105213,  0.03698358,  0.09043294, -0.02368014,
         1.02882104, -0.03984824,  0.04430695, -0.16174406, -0.06888039],
       [ 0.10960332,  0.01810948,  0.01551816,  0.00466832,  0.12438535,
        -0.04585334,  0.0701701 , -0.31118708,  0.01452274,  0.00140657,
        -0.03984824,  1.02938677,  0.17083956, -0.06818438,  0.07658565],
       [-0.03967756, -0.06917041,  0.06357575,  0.02064453,  0.03923418,
        -0.12769995,  0.02607544, -0.18033388, -0.10471364,  0.08145303,
         0.04430695,  0.17083956,  0.95662366, -0.11213143,  0.09800224],
       [ 0.09446944,  0.15688583, -0.04399953,  0.07308203, -0.07637782,
         0.08622382,  0.14635577,  0.06035246,  0.07146674, -0.11014874,
        -0.16174406, -0.06818438, -0.11213143,  1.11547517, -0.09052203],
       [ 0.03511019, -0.05317513,  0.11923481,  0.06905987, -0.05010725,
        -0.08576411, -0.02735392, -0.04068857,  0.05094118,  0.04111743,
        -0.06888039,  0.07658565,  0.09800224, -0.09052203,  0.79742062]]))


def test__nercome():
    np.random.seed(0)
    n = 130
    p = 5
    X = np.random.multivariate_normal(np.zeros(p), np.eye(p), n)
    cov = hd._nercome(X.T, m=10, M=5)[0]
    # print(repr(cov))
    assert np.allclose(cov, np.array([
       [ 0.8564806 ,  0.04909066,  0.04370823,  0.01531205, -0.00526171],
       [ 0.04909066,  0.93103974, -0.01808805, -0.04356843,  0.01293339],
       [ 0.04370823, -0.01808805,  0.8188812 , -0.05565398,  0.04396419],
       [ 0.01531205, -0.04356843, -0.05565398,  0.85456374,  0.03070921],
       [-0.00526171,  0.01293339,  0.04396419,  0.03070921,  0.80622056]]))


def test__optimal_nere():
    np.random.seed(0)
    n = 50
    p = 5
    Sigma_hats = np.random.multivariate_normal(np.zeros(p**2), np.eye(p**2), n)
    Sigma_tildes = np.random.multivariate_normal(np.zeros(p**2), np.eye(p**2), n)
    Sigmas = [(Sigma_hats[i].reshape(p, p), Sigma_tildes[i].reshape(p, p))
              for i in range(n)]
    assert hd._optimal_nere(Sigmas) == 43
    # print(hd._optimal_nere(Sigmas))


def test_nercome_endog_m():
    np.random.seed(0)
    n = 130
    p = 5
    X = np.random.multivariate_normal(np.zeros(p), np.eye(p), n)
    cov = hd.nercome(X.T)
    # print(repr(cov))
    assert np.allclose(cov, np.array([
       [ 0.9971481 , -0.01097169, -0.01291315, -0.02622539, -0.01831048],
       [-0.01097169,  0.95109283, -0.02037269,  0.00448057,  0.02516963],
       [-0.01291315, -0.02037269,  0.97804669, -0.00268646,  0.00838075],
       [-0.02622539,  0.00448057, -0.00268646,  0.99017675,  0.00757423],
       [-0.01831048,  0.02516963,  0.00838075,  0.00757423,  0.98713423]]))
