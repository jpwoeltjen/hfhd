import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))
from hfhd import hf
import numpy as np
import pandas as pd
from numpy import nan
import numba

# load mock data
cdir = os.path.dirname(__file__)
mock_prices = pd.read_pickle(os.path.join(cdir, 'mock_prices_2020-05-16-16-44-00.pkl'))
mock_previous_ticks = pd.read_pickle(os.path.join(cdir, 'mock_previous_ticks_2020-05-16-16-44-04.pkl'))


def test_refresh_time():
    tick_series_list = [mock_prices[c].dropna() for c in mock_prices.columns]
    previous_ticks = hf.refresh_time(tick_series_list)
    assert previous_ticks.equals(mock_previous_ticks)


def test_msrc_endog_K():
    data = mock_previous_ticks.to_numpy().T
    cov = hf._msrc(data, K=None)
    # print(repr(cov))
    assert np.allclose(cov, np.array([
       [0.00091726, 0.00078252, 0.00079328, 0.00071913, 0.00067038],
       [0.00078252, 0.0008792, 0.00069229, 0.00064148, 0.00060343],
       [0.00079328, 0.00069229, 0.00073481, 0.00060322, 0.00054399],
       [0.00071913, 0.00064148, 0.00060322, 0.00066256, 0.00052016],
       [0.00067038, 0.00060343, 0.00054399, 0.00052016, 0.00057223]]))


def test_msrc_exog_K():
    data = mock_previous_ticks.to_numpy().T
    K = np.arange(1, 3)
    # print(repr(hf.msrc(data, K=K)))
    assert np.allclose(hf._msrc(data, K=K), np.array([
       [0.00052136, 0.00042193, 0.00041587, 0.00037207, 0.00040712],
       [0.00042193, 0.00048021, 0.00035288, 0.00035388, 0.00030816],
       [0.00041587, 0.00035288, 0.00043437, 0.00035966, 0.00031758],
       [0.00037207, 0.00035388, 0.00035966, 0.00043275, 0.00034797],
       [0.00040712, 0.00030816, 0.00031758, 0.00034797, 0.00034418]]))


def test_msrc_pairwise_endog_K():
    tick_series_list = [mock_prices[c].dropna() for c in mock_prices.columns]
    indeces, values = hf._get_indeces_and_values(tick_series_list)
    K = None
    cov = hf._msrc_pairwise(indeces, values, K=K)
    # print(repr(cov))
    assert np.allclose(cov, np.array([
       [0.00065196, 0.00056686, 0.00063322, 0.00052299, 0.00057778],
       [0.00056686, 0.00068048, 0.00056793, 0.00046999, 0.00053876],
       [0.00063322, 0.00056793, 0.00068528, 0.00051267, 0.00053358],
       [0.00052299, 0.00046999, 0.00051267, 0.00054339, 0.00047957],
       [0.00057778, 0.00053876, 0.00053358, 0.00047957, 0.00060697]]))


def test_msrc_pairwise_exog_K():
    tick_series_list = [mock_prices[c].dropna() for c in mock_prices.columns]
    indeces, values = hf._get_indeces_and_values(tick_series_list)
    K = np.arange(1, 10)
    cov = hf._msrc_pairwise(indeces, values, K=K)
    # print(repr(cov))
    assert np.allclose(cov, np.array([
       [0.00052979, 0.00045639, 0.00050701, 0.00042619, 0.00048549],
       [0.00045639, 0.00054197, 0.00046051, 0.00037897, 0.00044803],
       [0.00050701, 0.00046051, 0.00055764, 0.00041164, 0.00044521],
       [0.00042619, 0.00037897, 0.00041164, 0.00045851, 0.0003918],
       [0.00048549, 0.00044803, 0.00044521, 0.0003918, 0.00053241]]))


def test_preaverage_endog_K():
    data = np.log(mock_prices.iloc[:, 0]).dropna().diff().dropna()
    pad = hf.preaverage(data, K=None, g=None, return_K=False)
    # print(repr(pad.values))
    assert np.allclose(pad.values[4:], np.array(
       [nan,             nan,             nan,             nan,
        1.09956820e-03,  1.04550745e-03,  2.24865202e-04, -4.05232015e-04,
        -4.68412568e-04, -1.38044675e-04, -7.45104271e-05, -2.49541434e-04,
        -5.39389859e-04, -6.33689391e-04, -3.53300147e-04,  4.19595341e-05,
        4.98226416e-05,  1.42061452e-04,  6.19840505e-04,  3.85180749e-04,
        -7.92677420e-04, -2.06512724e-03, -1.41864201e-03,  1.03821894e-04,
        8.66151916e-04,  5.28064974e-04, -2.86617856e-04, -8.78836937e-04,
        -9.22362763e-04, -1.54408142e-04,  1.49860220e-04,  2.82513207e-04,
        5.32641741e-04,  1.44265644e-03,  2.34577456e-03,  2.60011836e-03,
        2.47693408e-03,  1.84586607e-03,  1.28073445e-03,  1.17321964e-03,
        8.23241854e-04,  6.08705282e-04,  4.22176372e-04,  1.25097717e-03,
        2.34640181e-03,  2.26724456e-03,  2.04042627e-03,  1.97254693e-03,
        2.36843663e-03,  2.50432027e-03,  1.95270075e-03,  1.70932283e-03,
        1.24601213e-03,  3.59310412e-04, -1.33336515e-04, -4.14984927e-04,
        -3.20547774e-06,  1.68409873e-04,  2.40120321e-04,  1.66025996e-04,
        9.04795875e-05,  1.70769706e-04,  3.03384722e-04,  5.03979591e-04,
        1.88558923e-04,  2.50538015e-05,  2.99493611e-04,  1.05271848e-03,
        1.47316893e-03,  7.70242065e-04,  3.52282720e-04, -1.01719889e-04,
        2.17484223e-04,  1.09413894e-03,  5.03228256e-04, -1.07910497e-03,
        -2.20690620e-03, -1.42826516e-03, -3.65822837e-04, -2.89916780e-04,
        -8.23263271e-05,  3.19624073e-04,  5.38222143e-05, -4.57341447e-04,
        -4.96658879e-04, -2.39922164e-04,  2.42195837e-04,  1.77980244e-03,
        2.63709874e-03,  1.99922375e-03,  3.95907293e-04, -4.87783001e-04,
        2.34741731e-05,  4.10555821e-04,  5.65124072e-04,  4.40201531e-04,
        1.38195574e-04, -2.49537337e-04, -5.64547303e-04, -8.73676953e-04,
        -9.51802581e-04, -9.15303619e-04, -6.05737270e-04, -3.29054458e-04,
        -3.42483457e-04, -4.76035336e-04, -4.95386082e-04, -8.47535076e-04,
        -9.02515736e-04, -6.61613233e-04, -1.82978858e-04,  8.95070412e-05,
        -4.98033430e-04, -8.13016046e-04, -6.01819989e-04, -1.51641431e-04,
        6.15436347e-05,  1.53153780e-04,  2.23331040e-04,  1.79703836e-04,
        -1.12471476e-04, -2.03013334e-04, -3.91860459e-04, -4.96651072e-04,
        8.90993481e-04,  2.15089191e-03,  1.67426275e-03, -4.78467104e-05,
        -2.92726388e-04,  9.78389579e-04,  9.80548092e-04,  1.22404319e-05,
        -7.31171625e-05,  7.41187278e-04,  9.45566895e-04,  2.80780401e-04,
        2.24460567e-04,  9.09470006e-04,  8.07880211e-04,  1.27490359e-04,
        -3.46042340e-04, -2.80772256e-04, -8.82737090e-05, -3.47329138e-04,
        -5.14857385e-04, -8.94027426e-05,  1.02856254e-04, -1.44898651e-04,
        -6.95555135e-04, -1.19856452e-03, -6.20640638e-04,  1.31187443e-04,
        6.15911523e-04,  6.15827460e-04,  2.81200599e-05, -2.70284646e-04,
        -3.41740138e-04, -8.09303845e-05,  5.32077177e-04,  4.24435555e-04,
        -6.19780388e-05, -3.40289438e-04, -1.08450421e-04, -5.63972978e-07,
        -4.28064532e-04, -1.02134446e-03, -1.40351422e-03, -1.72792090e-03,
        -1.59310827e-03, -7.48739127e-04, -8.83348700e-05,  3.67200249e-04,
        3.84933896e-04,  6.07094563e-04,  4.09446819e-04, -1.72808816e-04,
        -3.31477413e-04, -3.89892975e-04, -2.53234035e-04, -1.07766421e-04,
        -8.26486935e-05, -1.41816151e-04, -3.79283898e-04, -5.59769492e-04,
        -5.04965021e-04, -2.72455448e-04,  2.03997551e-05,  1.24722250e-04,
        -2.72565695e-04, -3.60164161e-04, -5.43645266e-05,  1.68538233e-04,
        2.38389166e-04,  8.17676398e-05, -7.75488032e-06, -3.29661612e-04])[4:]
    )


def test_preaverage_exog_K():
    data = np.log(mock_prices.iloc[:, 0]).dropna().diff().dropna()
    pad = hf.preaverage(data, K=10, g=None, return_K=False)
    # print(repr(pad.values))
    assert np.allclose(pad.values[9:], np.array(
      [nan,             nan,             nan,             nan,
       nan,             nan,             nan,             nan,
                  nan,  2.95705436e-04,  1.64708876e-05, -3.32440654e-04,
       -6.19763352e-04, -6.33796352e-04, -7.36730741e-04, -6.51786672e-04,
       -6.51201083e-04, -3.60949483e-04,  4.02119559e-05,  2.01448358e-04,
       -1.44504313e-04, -3.14295580e-04, -7.03183858e-04, -1.38378610e-03,
       -1.34768266e-03, -8.64775972e-04, -4.70443552e-04, -4.59020507e-04,
       -2.06516446e-04, -3.32547012e-04, -6.50234555e-04, -6.73309065e-04,
       -8.79242575e-05,  5.78574754e-04,  1.33168507e-03,  2.55511650e-03,
        3.39621379e-03,  3.92559865e-03,  4.10928494e-03,  4.15375856e-03,
        3.36619977e-03,  2.83550487e-03,  2.22590267e-03,  2.15850206e-03,
        2.08051754e-03,  2.62864456e-03,  3.05348962e-03,  3.97028956e-03,
        4.09724049e-03,  4.43562978e-03,  4.55961223e-03,  4.59796844e-03,
        3.88649977e-03,  3.49704733e-03,  2.65105080e-03,  1.79736394e-03,
        8.59417258e-04,  3.86381251e-04,  1.04701933e-04,  6.32573573e-05,
        1.30294338e-04,  2.51793779e-04,  4.13458995e-04,  4.68910864e-04,
        4.63580625e-04,  4.66630371e-04,  6.58072072e-04,  8.23931453e-04,
        1.00845661e-03,  1.29799801e-03,  1.56208505e-03,  1.38341385e-03,
        1.24386760e-03,  1.26293261e-03,  9.04934963e-04,  6.54068620e-05,
       -6.75326767e-05, -6.78783342e-04, -1.80552432e-03, -1.91431660e-03,
       -1.33563136e-03, -1.33644994e-03, -1.00724623e-03, -1.82335400e-04,
       -1.36178112e-04, -4.31137510e-04, -2.84042823e-04,  5.61877031e-04,
        1.06013446e-03,  1.76532468e-03,  2.44986165e-03,  2.78322667e-03,
        1.91215506e-03,  1.51246231e-03,  9.65065897e-04,  6.78988105e-04,
        3.72280242e-04,  4.73557318e-04,  1.64525936e-04, -1.21579013e-04,
       -7.59054025e-04, -1.16907220e-03, -1.39578457e-03, -1.48735418e-03,
       -1.45828050e-03, -1.19019904e-03, -1.03985411e-03, -1.19549391e-03,
       -1.14717603e-03, -1.20222916e-03, -1.24382628e-03, -1.22706329e-03,
       -9.54911806e-04, -9.92233054e-04, -7.90284428e-04, -8.34178102e-04,
       -8.61882458e-04, -5.18707941e-04, -2.30403809e-04, -2.29440681e-04,
        8.89826164e-05,  2.83741188e-04, -2.19850848e-04, -2.75036986e-04,
        2.58213931e-04,  5.28226265e-04,  7.70352284e-04,  1.45080504e-03,
        2.03556893e-03,  1.65099662e-03,  1.24129410e-03,  1.14656406e-03,
        1.25684358e-03,  7.67283724e-04,  6.92301638e-04,  1.01812127e-03,
        1.25014253e-03,  9.57508133e-04,  1.01736970e-03,  1.12272210e-03,
        9.93229044e-04,  5.31222794e-04,  1.68277565e-04, -1.03869007e-04,
       -3.35357341e-04, -4.87089317e-04, -5.26018475e-04, -5.20164836e-04,
       -5.05747110e-04, -7.31505666e-04, -9.32761375e-04, -8.88882960e-04,
       -7.35384647e-04, -4.86092929e-04,  6.24339139e-05,  1.52080743e-04,
        2.14594561e-04,  2.21073263e-04,  1.55201793e-04, -4.19506318e-05,
        1.53169621e-04,  1.35845740e-04,  2.24806662e-04, -9.06318646e-05,
       -2.21804757e-04, -6.02831341e-04, -9.80620104e-04, -1.84541798e-03,
       -2.02277115e-03, -2.33832058e-03, -2.31916978e-03, -1.96350200e-03,
       -9.45909742e-04, -3.63527074e-04,  1.68339107e-04,  5.00991197e-04,
        5.33617971e-04,  1.71399211e-04, -1.32129472e-04, -3.01021518e-04,
       -3.74404424e-04, -5.22599499e-04, -4.54107179e-04, -4.87977882e-04,
       -6.15677840e-04, -7.07664075e-04, -5.94778901e-04, -6.22536201e-04,
       -5.17595467e-04, -3.30637530e-04, -2.28518754e-04, -2.60492810e-04,
       -1.31789700e-04,  6.21486712e-05,  4.21592300e-05, -8.78162784e-05])[9:]
    )


@numba.njit
def g(x): return np.minimum(x, 1-x)


def test_preaverage_exog_K_multivariate():
    data = np.log(mock_previous_ticks).dropna().diff().dropna()
    pad = hf.preaverage(data, K=10, g=g, return_K=False)
    # print(repr(pad.values[9:15, :]))
    assert np.allclose(pad.values[9:15, :], np.array([
        [-3.44701144e-04, -3.60258436e-04, -8.41039362e-04,
         6.56707520e-04,  1.21182439e-04],
       [-8.46837283e-04, -7.93613324e-04, -2.10165233e-03,
         5.42233678e-04,  3.09569945e-05],
       [-1.10400955e-03, -6.55606040e-04, -2.78542973e-03,
         6.76696786e-04,  1.50893509e-04],
       [-9.20518023e-04, -3.22419791e-04, -3.20002571e-03,
         7.79647220e-04,  8.49508119e-04],
       [-7.44379912e-04, -9.88286231e-05, -2.88839618e-03,
         7.92075880e-04,  1.01077334e-03],
       [-1.45191890e-03, -2.85343213e-04, -3.39311468e-03,
         1.99818094e-04,  8.56736236e-04]]))


def test__mrc_univariate_with_bias_correction():
    data = np.log(mock_prices.iloc[:, 0]).dropna().diff().dropna()
    mrc = hf._mrc(data.to_numpy()[:, None], theta=0.4, g=g, bias_correction=True)
    # print(repr(mrc))
    assert np.allclose(mrc, np.array([[0.00031784]]))


def test__mrc_univariate_no_bias_correction():
    data = np.log(mock_prices.iloc[:, 0]).dropna().diff().dropna()
    mrc = hf._mrc(data.to_numpy()[:, None], theta=0.4, g=g, bias_correction=False)
    # print(repr(mrc))
    assert np.allclose(mrc, np.array([[0.00045942]]))


def test_mrc__univariate_exog_theta():
    data = np.log(mock_prices.iloc[:, 0]).dropna().diff().dropna()
    mrc = hf._mrc(data.to_numpy()[:, None], theta=0.1, g=g, bias_correction=False)
    # print(repr(mrc))
    assert np.allclose(mrc, np.array([[0.00039356]]))


def test__mrc_multivariate():
    data = np.log(mock_previous_ticks).dropna().diff().dropna()
    # print(data)
    mrc = hf._mrc(data.to_numpy(), theta=0.4, g=g, bias_correction=True)
    # print(repr(mrc))
    assert np.allclose(mrc, np.array([
       [0.00041211, 0.0003256 , 0.00032493, 0.00030336, 0.00031333],
       [0.0003256 , 0.00036603, 0.0002744 , 0.00027635, 0.00025101],
       [0.00032493, 0.0002744 , 0.00034153, 0.00027569, 0.00024066],
       [0.00030336, 0.00027635, 0.00027569, 0.00034405, 0.00026226],
       [0.00031333, 0.00025101, 0.00024066, 0.00026226, 0.00028646]]))


def test__hayashi_yoshida():
    series_a = np.log(mock_prices.iloc[:, 0].dropna()).diff()
    series_b = np.log(mock_prices.iloc[:, 1].dropna()).diff()
    series_a -= series_a.mean()
    series_b -= series_b.mean()
    a_values = series_a.fillna(0).values
    a_index = np.array(series_a.index, dtype='uint64')
    b_values = series_b.fillna(0).values
    b_index = np.array(series_b.index, dtype='uint64')

    hy = hf._hayashi_yoshida(a_index, b_index, a_values, b_values, step=1)
    # print(hy)
    assert np.allclose(hy, 0.0003578860312466325)


def test_hayashi_yoshida_preaveraged():
    series_a = mock_prices.iloc[:, 0].dropna()
    series_b = mock_prices.iloc[:, 1].dropna()
    hy = hf.hayashi_yoshida([series_a, series_b], theta=0.1)
    print(hy)
    assert np.allclose(hy[0, 1], 0.00023339)


def test_epic():
    tick_series_list = [mock_prices[c].dropna() for c in mock_prices.columns]
    cov = hf.epic(tick_series_list, K=np.arange(1, 2), theta=0.4)
    # print(repr(cov))
    assert np.allclose(cov, np.array([
       [0.00044878, 0.00037394, 0.00039654, 0.00033561, 0.00036709],
       [0.00037394, 0.0004934 , 0.00036735, 0.000331  , 0.00036161],
       [0.00039654, 0.00036735, 0.00046291, 0.00032767, 0.00032107],
       [0.00033561, 0.000331  , 0.00032767, 0.0004155 , 0.00031161],
       [0.00036709, 0.00036161, 0.00032107, 0.00031161, 0.00041999]]))
